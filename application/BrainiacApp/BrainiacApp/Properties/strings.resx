<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Hello" xml:space="preserve">
    <value>Hello</value>
  </data>
  <data name="T1Info1" xml:space="preserve">
    <value>During this test, you need to keep your eyes closed.
You will hear some instructions and take actions
accordingly. These instructions will be related to
thinking or imagining objects/scenarios.</value>
  </data>
  <data name="T1Info2" xml:space="preserve">
    <value>You will be given 6 instructions in total and for each
instruction you will be given some time. During test try
not to think anything else.</value>
  </data>
  <data name="T1Info3" xml:space="preserve">
    <value>Between instructions you will be given 5 seconds
resting time. During that time keep your eyes closed
and try not to think anything.</value>
  </data>
  <data name="T1Q1" xml:space="preserve">
    <value>Think of the object “bike”. </value>
  </data>
  <data name="T1Q2" xml:space="preserve">
    <value>Visualize the object “car” in yor mind.</value>
  </data>
  <data name="T1Q3" xml:space="preserve">
    <value>Visualize a bumblebee with a head of bull in your head.</value>
  </data>
  <data name="T1Q4" xml:space="preserve">
    <value>Visualize an imaginary place you would love to be in.
This place should not exist in real world.</value>
  </data>
  <data name="T1Q5" xml:space="preserve">
    <value>Visualize an imaginary event in your mind. This
event should not have happened in real life. It can
be totally fiction or inspired from real life events.</value>
  </data>
  <data name="T2Info1" xml:space="preserve">
    <value>You will be shown 3 pictures one by one. For each
picture you will be given 20 seconds. During those 
whole 20 seconds, you should think about what the
picture reminds you of.</value>
  </data>
  <data name="T2Info2" xml:space="preserve">
    <value>The pictures might remind you of things related to 
real life or fiction. Try hard to make connections.</value>
  </data>
  <data name="T2Info3" xml:space="preserve">
    <value>Between pictures you will have 10 seconds rest. 
Free your mind.</value>
  </data>
  <data name="T2Q" xml:space="preserve">
    <value>What does this picture resemble to you?
(Can be multiple things)</value>
  </data>
  <data name="T3Info1" xml:space="preserve">
    <value>There will be a 3x3 board consisting of squares. Each question will 
consist of 3 parts. In the first part, a square will light up and a letter
will be shown on it. You have to remember the square and the letter.
This will be repeated for the second part and the third part too.</value>
  </data>
  <data name="T3Info2" xml:space="preserve">
    <value>In the third part you will have choices to select. If the square and the
letter matches the ones from the first part, then you select both match.
If they do not match, you select no match. If only one of them matches
you select the corresponding match.</value>
  </data>
  <data name="T3Info3" xml:space="preserve">
    <value>For first and second parts you will have 3 seconds. For the third part,
You will have 4 seconds.</value>
  </data>
  <data name="T3Info4" xml:space="preserve">
    <value>This will be repeated for 7 times. There will not be rest times.</value>
  </data>
  <data name="T4Info1" xml:space="preserve">
    <value>You will be given a noun and then you should think of a verb
related to it. Then you need to enter the verb into a text box.</value>
  </data>
  <data name="T4Info2" xml:space="preserve">
    <value>However, try to think of unusal verbs. Do not write the most
common verb you can think of.</value>
  </data>
  <data name="T4Info3" xml:space="preserve">
    <value>You will be given 15 seconds for each noun. Do not leave
the textbox empty.</value>
  </data>
  <data name="T4Info4" xml:space="preserve">
    <value>You will be given 5 second rest time between each noun.</value>
  </data>
  <data name="T4Q1" xml:space="preserve">
    <value>Pencil</value>
  </data>
  <data name="T4Q2" xml:space="preserve">
    <value>Music</value>
  </data>
  <data name="T4Q3" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="T4Q4" xml:space="preserve">
    <value>Family</value>
  </data>
  <data name="T4Q5" xml:space="preserve">
    <value>School</value>
  </data>
  <data name="T5Info1" xml:space="preserve">
    <value>You will be given some commands randomly. This commands
will say either “Go” or “Don’t Go”. If you see “Go” you should
click the button which says “Go”. If you see “Don’t Go”, you
should wait till the next command arrives.</value>
  </data>
  <data name="T5Info2" xml:space="preserve">
    <value>Your speed will be important because commands will
stay 2-5 seconds. If you fail commands, it
will be noted.</value>
  </data>
  <data name="T5Info3" xml:space="preserve">
    <value>This test will last in total 40 seconds. There will be no rest.</value>
  </data>
  <data name="T5Q1" xml:space="preserve">
    <value />
  </data>
</root>