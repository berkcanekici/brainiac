<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Hello" xml:space="preserve">
    <value>Merhaba</value>
  </data>
  <data name="T1Info1" xml:space="preserve">
    <value>Bu test süresince gözlerinizi kapalı tutmalısınız.
Size belli komutlar verilecek ve bu komutlara uygun
olarak hareket etmelisiniz. Bu komutlar aklınızda
bir cisim/olay canlandırmanıza yönelik olacak.</value>
  </data>
  <data name="T1Info2" xml:space="preserve">
    <value>Toplam 6 komut alacaksınız ve bu komutlar için
belirli süreleriniz olacak. Bu süreçte başka şeyler
düşünmemeye çalışmalısınız.</value>
  </data>
  <data name="T1Info3" xml:space="preserve">
    <value>Komutlar arası 5'er saniye dinlenme süreniz
olacak. Bu süreçte beyninizi boşaltmaya çalışın.</value>
  </data>
  <data name="T1Q1" xml:space="preserve">
    <value>“Bisiklet” objesi hakkında düşünün. </value>
  </data>
  <data name="T1Q2" xml:space="preserve">
    <value>Aklınızda “araba” objesini canlandırın. </value>
  </data>
  <data name="T1Q3" xml:space="preserve">
    <value>Aklınızda boğa kafasına sahip bir arı canlandırın.</value>
  </data>
  <data name="T1Q4" xml:space="preserve">
    <value>İçinde bulunmayı çok isteyeceğiniz bir yer hayal edin.
Bu yer gerçek hayatta bulunmamalı.</value>
  </data>
  <data name="T1Q5" xml:space="preserve">
    <value>Aklınızda gerçekleşmemiş hayali bir olay canlandırın.
Bu olay tamamen kurgu veya gerçek hayattan
esinlenmiş olabilir.</value>
  </data>
  <data name="T2Info1" xml:space="preserve">
    <value>Size teker teker 3 resim gösterilecek. Her resim için
20 saniyeniz olacak. 20 saniye boyunca o resmin
Size neler çağırıştırdığını düşünmelisiniz.</value>
  </data>
  <data name="T2Info2" xml:space="preserve">
    <value>Çağrışımlar gerçek hayata dair veya hayali olabilir.
Bağlantılar bulmak için iyice düşünün.</value>
  </data>
  <data name="T2Info3" xml:space="preserve">
    <value>Resimler arasında 10’ar saniye dinlenme süreniz olacak.
Aklınızı boşaltın.</value>
  </data>
  <data name="T2Q" xml:space="preserve">
    <value>Bu resim size ne veya neleri çağırıştırıyor?</value>
  </data>
  <data name="T3Info1" xml:space="preserve">
    <value>Karşınızda 3x3 karelerden oluşan bir tablo olacak. Her soru
3 parttan oluşacak. Birinci partta bir kare aydınlanacak ve 
içinde bir harf görünecek. Bu kareyi ve harfi unutmamalısınız.
Bu 2. Ve 3. partta da tekrarlanacak.</value>
  </data>
  <data name="T3Info2" xml:space="preserve">
    <value>3. Partta seçenekleriniz olacak. Eğer aydınlanan kare ve harf
birinci parttakiyle aynı ise, ikili eşleşmeyi seçmelisiniz. Eğer
farklı ise, sıfır eşleşmeyi seçmelisiniz. Eğer biri aynı ise ona
göre seçim yapmalısınız.</value>
  </data>
  <data name="T3Info3" xml:space="preserve">
    <value>Birinci ve ikinci partlar için 3’er, üçüncü part için 4 saniyeniz olacak.</value>
  </data>
  <data name="T3Info4" xml:space="preserve">
    <value>Bu 6 kere tekrarlanacak. Dinlenme olmayacak.</value>
  </data>
  <data name="T4Info1" xml:space="preserve">
    <value>Size bir kelime verilecek ve bu kelimeye uygun bir fiil
düşünmelisiniz. Ardından bu fiili bir text kutucuğuna
yazmalısınız.</value>
  </data>
  <data name="T4Info2" xml:space="preserve">
    <value>Ancak akla ilk gelecek fiil yerine daha özel fiiller
bulmaya çalışın.</value>
  </data>
  <data name="T4Info3" xml:space="preserve">
    <value>Her kelime için 15’er saniyeniz olacak. Text kutucuğunu
boş bırakmayın.</value>
  </data>
  <data name="T4Info4" xml:space="preserve">
    <value>Kelime aralarında 5’er saniye dinlenme süreniz olacak.</value>
  </data>
  <data name="T4Q1" xml:space="preserve">
    <value>Kalem</value>
  </data>
  <data name="T4Q2" xml:space="preserve">
    <value>Müzik</value>
  </data>
  <data name="T4Q3" xml:space="preserve">
    <value>Oyun</value>
  </data>
  <data name="T4Q4" xml:space="preserve">
    <value>Aile</value>
  </data>
  <data name="T4Q5" xml:space="preserve">
    <value>Okul</value>
  </data>
  <data name="T5Info1" xml:space="preserve">
    <value>Size belli komutlar rastgele bir şekilde verilecek.
Bu kotmular ya “Go” ya da “Don’t Go” olacak. Eğer
“Go” görürseniz üstünde “Go” yazan butona basmalısınız. 
Eğer “Don’t Go” görürseniz, hiçbir şey yapmadan bir sonraki
komutu beklemelisiniz.</value>
  </data>
  <data name="T5Info2" xml:space="preserve">
    <value>Hızınız önemli olacak çünkü komutlar 2-5 saniye
ekranda kalacak. Eğer başarısız olursanız bu kaydedilecek.</value>
  </data>
  <data name="T5Info3" xml:space="preserve">
    <value>Bu test toplam 40 saniye sürecek ve dinlenme olmayacak.</value>
  </data>
</root>